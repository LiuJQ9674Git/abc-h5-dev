{"version":3,"sources":["times.js"],"names":[],"mappings":"AAAA,IAAI,eAAe,QAAQ,0BAAR,CAAnB;;;AAGA,IAAI,cAAc,KAAK,KAAvB;IACI,iBAAiB,OAAO,QAD5B;IAEI,YAAY,KAAK,GAFrB;;;AAKA,IAAI,mBAAmB,UAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAS,KAAT,CAAe,CAAf,EAAkB,QAAlB,EAA4B,OAA5B,EAAqC;AACnC,MAAI,YAAY,CAAZ,CAAJ;;;;AAIA,MAAI,IAAI,CAAJ,IAAS,CAAC,eAAe,CAAf,CAAd,EAAiC;AAC/B,WAAO,EAAP;AACD;AACD,MAAI,QAAQ,CAAC,CAAb;MACI,SAAS,MAAM,UAAU,CAAV,EAAa,gBAAb,CAAN,CADb;;AAGA,aAAW,aAAa,QAAb,EAAuB,OAAvB,EAAgC,CAAhC,CAAX;AACA,SAAO,EAAE,KAAF,GAAU,CAAjB,EAAoB;AAClB,QAAI,QAAQ,gBAAZ,EAA8B;AAC5B,aAAO,KAAP,IAAgB,SAAS,KAAT,CAAhB;AACD,KAFD,MAEO;AACL,eAAS,KAAT;AACD;AACF;AACD,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,KAAjB","file":"times-compiled.js","sourcesContent":["var bindCallback = require('../internal/bindCallback');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeIsFinite = global.isFinite,\n    nativeMin = Math.min;\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Invokes the iteratee function `n` times, returning an array of the results\n * of each invocation. The `iteratee` is bound to `thisArg` and invoked with\n * one argument; (index).\n *\n * @static\n * @memberOf _\n * @category Utility\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));\n * // => [3, 6, 4]\n *\n * _.times(3, function(n) {\n *   mage.castSpell(n);\n * });\n * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`\n *\n * _.times(3, function(n) {\n *   this.cast(n);\n * }, mage);\n * // => also invokes `mage.castSpell(n)` three times\n */\nfunction times(n, iteratee, thisArg) {\n  n = nativeFloor(n);\n\n  // Exit early to avoid a JSC JIT bug in Safari 8\n  // where `Array(0)` is treated as `Array(1)`.\n  if (n < 1 || !nativeIsFinite(n)) {\n    return [];\n  }\n  var index = -1,\n      result = Array(nativeMin(n, MAX_ARRAY_LENGTH));\n\n  iteratee = bindCallback(iteratee, thisArg, 1);\n  while (++index < n) {\n    if (index < MAX_ARRAY_LENGTH) {\n      result[index] = iteratee(index);\n    } else {\n      iteratee(index);\n    }\n  }\n  return result;\n}\n\nmodule.exports = times;\n"]}