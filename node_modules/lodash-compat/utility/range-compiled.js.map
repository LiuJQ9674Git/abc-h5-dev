{"version":3,"sources":["range.js"],"names":[],"mappings":"AAAA,IAAI,iBAAiB,QAAQ,4BAAR,CAArB;;;AAGA,IAAI,aAAa,KAAK,IAAtB;IACI,YAAY,KAAK,GADrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,SAAS,KAAT,CAAe,KAAf,EAAsB,GAAtB,EAA2B,IAA3B,EAAiC;AAC/B,MAAI,QAAQ,eAAe,KAAf,EAAsB,GAAtB,EAA2B,IAA3B,CAAZ,EAA8C;AAC5C,UAAM,OAAO,SAAb;AACD;AACD,UAAQ,CAAC,KAAD,IAAU,CAAlB;AACA,SAAO,QAAQ,IAAR,GAAe,CAAf,GAAoB,CAAC,IAAD,IAAS,CAApC;;AAEA,MAAI,OAAO,IAAX,EAAiB;AACf,UAAM,KAAN;AACA,YAAQ,CAAR;AACD,GAHD,MAGO;AACL,UAAM,CAAC,GAAD,IAAQ,CAAd;AACD;;;AAGD,MAAI,QAAQ,CAAC,CAAb;MACI,SAAS,UAAU,WAAW,CAAC,MAAM,KAAP,KAAiB,QAAQ,CAAzB,CAAX,CAAV,EAAmD,CAAnD,CADb;MAEI,SAAS,MAAM,MAAN,CAFb;;AAIA,SAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,WAAO,KAAP,IAAgB,KAAhB;AACA,aAAS,IAAT;AACD;AACD,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,KAAjB","file":"range-compiled.js","sourcesContent":["var isIterateeCall = require('../internal/isIterateeCall');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * Creates an array of numbers (positive and/or negative) progressing from\n * `start` up to, but not including, `end`. If `end` is not specified it's\n * set to `start` with `start` then set to `0`. If `end` is less than `start`\n * a zero-length range is created unless a negative `step` is specified.\n *\n * @static\n * @memberOf _\n * @category Utility\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the new array of numbers.\n * @example\n *\n * _.range(4);\n * // => [0, 1, 2, 3]\n *\n * _.range(1, 5);\n * // => [1, 2, 3, 4]\n *\n * _.range(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * _.range(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 4, 0);\n * // => [1, 1, 1]\n *\n * _.range(0);\n * // => []\n */\nfunction range(start, end, step) {\n  if (step && isIterateeCall(start, end, step)) {\n    end = step = undefined;\n  }\n  start = +start || 0;\n  step = step == null ? 1 : (+step || 0);\n\n  if (end == null) {\n    end = start;\n    start = 0;\n  } else {\n    end = +end || 0;\n  }\n  // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.\n  // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = start;\n    start += step;\n  }\n  return result;\n}\n\nmodule.exports = range;\n"]}