{"version":3,"sources":["mixin.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,uBAAR,CAAhB;IACI,YAAY,QAAQ,uBAAR,CADhB;IAEI,gBAAgB,QAAQ,2BAAR,CAFpB;IAGI,aAAa,QAAQ,oBAAR,CAHjB;IAII,WAAW,QAAQ,kBAAR,CAJf;IAKI,OAAO,QAAQ,gBAAR,CALX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,SAAS,KAAT,CAAe,MAAf,EAAuB,MAAvB,EAA+B,OAA/B,EAAwC;AACtC,MAAI,cAAc,cAAc,MAAd,EAAsB,KAAK,MAAL,CAAtB,CAAlB;;AAEA,MAAI,QAAQ,IAAZ;MACI,QAAQ,CAAC,CADb;MAEI,SAAS,WAAW,MAAX,CAFb;MAGI,SAAS,YAAY,MAHzB;;AAKA,MAAI,YAAY,KAAhB,EAAuB;AACrB,YAAQ,KAAR;AACD,GAFD,MAEO,IAAI,SAAS,OAAT,KAAqB,WAAW,OAApC,EAA6C;AAClD,YAAQ,QAAQ,KAAhB;AACD;AACD,SAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,QAAI,aAAa,YAAY,KAAZ,CAAjB;QACI,OAAO,OAAO,UAAP,CADX;;AAGA,WAAO,UAAP,IAAqB,IAArB;AACA,QAAI,MAAJ,EAAY;AACV,aAAO,SAAP,CAAiB,UAAjB,IAAgC,UAAS,IAAT,EAAe;AAC7C,eAAO,YAAW;AAChB,cAAI,WAAW,KAAK,SAApB;AACA,cAAI,SAAS,QAAb,EAAuB;AACrB,gBAAI,SAAS,OAAO,KAAK,WAAZ,CAAb;gBACI,UAAU,OAAO,WAAP,GAAqB,UAAU,KAAK,WAAf,CADnC;;AAGA,oBAAQ,IAAR,CAAa,EAAE,QAAQ,IAAV,EAAgB,QAAQ,SAAxB,EAAmC,WAAW,MAA9C,EAAb;AACA,mBAAO,SAAP,GAAmB,QAAnB;AACA,mBAAO,MAAP;AACD;AACD,iBAAO,KAAK,KAAL,CAAW,MAAX,EAAmB,UAAU,CAAC,KAAK,KAAL,EAAD,CAAV,EAA0B,SAA1B,CAAnB,CAAP;AACD,SAXD;AAYD,OAb+B,CAa9B,IAb8B,CAAhC;AAcD;AACF;AACD,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,KAAjB","file":"mixin-compiled.js","sourcesContent":["var arrayCopy = require('../internal/arrayCopy'),\n    arrayPush = require('../internal/arrayPush'),\n    baseFunctions = require('../internal/baseFunctions'),\n    isFunction = require('../lang/isFunction'),\n    isObject = require('../lang/isObject'),\n    keys = require('../object/keys');\n\n/**\n * Adds all own enumerable function properties of a source object to the\n * destination object. If `object` is a function then methods are added to\n * its prototype as well.\n *\n * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n * avoid conflicts caused by modifying the original.\n *\n * @static\n * @memberOf _\n * @category Utility\n * @param {Function|Object} [object=lodash] The destination object.\n * @param {Object} source The object of functions to add.\n * @param {Object} [options] The options object.\n * @param {boolean} [options.chain=true] Specify whether the functions added\n *  are chainable.\n * @returns {Function|Object} Returns `object`.\n * @example\n *\n * function vowels(string) {\n *   return _.filter(string, function(v) {\n *     return /[aeiou]/i.test(v);\n *   });\n * }\n *\n * _.mixin({ 'vowels': vowels });\n * _.vowels('fred');\n * // => ['e']\n *\n * _('fred').vowels().value();\n * // => ['e']\n *\n * _.mixin({ 'vowels': vowels }, { 'chain': false });\n * _('fred').vowels();\n * // => ['e']\n */\nfunction mixin(object, source, options) {\n  var methodNames = baseFunctions(source, keys(source));\n\n  var chain = true,\n      index = -1,\n      isFunc = isFunction(object),\n      length = methodNames.length;\n\n  if (options === false) {\n    chain = false;\n  } else if (isObject(options) && 'chain' in options) {\n    chain = options.chain;\n  }\n  while (++index < length) {\n    var methodName = methodNames[index],\n        func = source[methodName];\n\n    object[methodName] = func;\n    if (isFunc) {\n      object.prototype[methodName] = (function(func) {\n        return function() {\n          var chainAll = this.__chain__;\n          if (chain || chainAll) {\n            var result = object(this.__wrapped__),\n                actions = result.__actions__ = arrayCopy(this.__actions__);\n\n            actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n            result.__chain__ = chainAll;\n            return result;\n          }\n          return func.apply(object, arrayPush([this.value()], arguments));\n        };\n      }(func));\n    }\n  }\n  return object;\n}\n\nmodule.exports = mixin;\n"]}