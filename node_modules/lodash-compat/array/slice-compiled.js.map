{"version":3,"sources":["slice.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,uBAAR,CAAhB;IACI,iBAAiB,QAAQ,4BAAR,CADrB;;;;;;;;;;;;;;;;AAiBA,SAAS,KAAT,CAAe,KAAf,EAAsB,KAAtB,EAA6B,GAA7B,EAAkC;AAChC,MAAI,SAAS,QAAQ,MAAM,MAAd,GAAuB,CAApC;AACA,MAAI,CAAC,MAAL,EAAa;AACX,WAAO,EAAP;AACD;AACD,MAAI,OAAO,OAAO,GAAP,IAAc,QAArB,IAAiC,eAAe,KAAf,EAAsB,KAAtB,EAA6B,GAA7B,CAArC,EAAwE;AACtE,YAAQ,CAAR;AACA,UAAM,MAAN;AACD;AACD,SAAO,UAAU,KAAV,EAAiB,KAAjB,EAAwB,GAAxB,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,KAAjB","file":"slice-compiled.js","sourcesContent":["var baseSlice = require('../internal/baseSlice'),\n    isIterateeCall = require('../internal/isIterateeCall');\n\n/**\n * Creates a slice of `array` from `start` up to, but not including, `end`.\n *\n * **Note:** This method is used instead of `Array#slice` to support node\n * lists in IE < 9 and to ensure dense arrays are returned.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction slice(array, start, end) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return [];\n  }\n  if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n    start = 0;\n    end = length;\n  }\n  return baseSlice(array, start, end);\n}\n\nmodule.exports = slice;\n"]}