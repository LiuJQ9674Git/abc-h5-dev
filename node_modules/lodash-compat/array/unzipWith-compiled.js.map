{"version":3,"sources":["unzipWith.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,sBAAR,CAAf;IACI,cAAc,QAAQ,yBAAR,CADlB;IAEI,eAAe,QAAQ,0BAAR,CAFnB;IAGI,QAAQ,QAAQ,SAAR,CAHZ;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAAS,SAAT,CAAmB,KAAnB,EAA0B,QAA1B,EAAoC,OAApC,EAA6C;AAC3C,MAAI,SAAS,QAAQ,MAAM,MAAd,GAAuB,CAApC;AACA,MAAI,CAAC,MAAL,EAAa;AACX,WAAO,EAAP;AACD;AACD,MAAI,SAAS,MAAM,KAAN,CAAb;AACA,MAAI,YAAY,IAAhB,EAAsB;AACpB,WAAO,MAAP;AACD;AACD,aAAW,aAAa,QAAb,EAAuB,OAAvB,EAAgC,CAAhC,CAAX;AACA,SAAO,SAAS,MAAT,EAAiB,UAAS,KAAT,EAAgB;AACtC,WAAO,YAAY,KAAZ,EAAmB,QAAnB,EAA6B,SAA7B,EAAwC,IAAxC,CAAP;AACD,GAFM,CAAP;AAGD;;AAED,OAAO,OAAP,GAAiB,SAAjB","file":"unzipWith-compiled.js","sourcesContent":["var arrayMap = require('../internal/arrayMap'),\n    arrayReduce = require('../internal/arrayReduce'),\n    bindCallback = require('../internal/bindCallback'),\n    unzip = require('./unzip');\n\n/**\n * This method is like `_.unzip` except that it accepts an iteratee to specify\n * how regrouped values should be combined. The `iteratee` is bound to `thisArg`\n * and invoked with four arguments: (accumulator, value, index, group).\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @param {Function} [iteratee] The function to combine regrouped values.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {Array} Returns the new array of regrouped elements.\n * @example\n *\n * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n * // => [[1, 10, 100], [2, 20, 200]]\n *\n * _.unzipWith(zipped, _.add);\n * // => [3, 30, 300]\n */\nfunction unzipWith(array, iteratee, thisArg) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return [];\n  }\n  var result = unzip(array);\n  if (iteratee == null) {\n    return result;\n  }\n  iteratee = bindCallback(iteratee, thisArg, 4);\n  return arrayMap(result, function(group) {\n    return arrayReduce(group, iteratee, undefined, true);\n  });\n}\n\nmodule.exports = unzipWith;\n"]}