{"version":3,"sources":["chunk.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,uBAAR,CAAhB;IACI,iBAAiB,QAAQ,4BAAR,CADrB;;;AAIA,IAAI,aAAa,KAAK,IAAtB;IACI,cAAc,KAAK,KADvB;IAEI,YAAY,KAAK,GAFrB;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAS,KAAT,CAAe,KAAf,EAAsB,IAAtB,EAA4B,KAA5B,EAAmC;AACjC,MAAI,QAAQ,eAAe,KAAf,EAAsB,IAAtB,EAA4B,KAA5B,CAAR,GAA6C,QAAQ,IAAzD,EAA+D;AAC7D,WAAO,CAAP;AACD,GAFD,MAEO;AACL,WAAO,UAAU,YAAY,IAAZ,KAAqB,CAA/B,EAAkC,CAAlC,CAAP;AACD;AACD,MAAI,QAAQ,CAAZ;MACI,SAAS,QAAQ,MAAM,MAAd,GAAuB,CADpC;MAEI,WAAW,CAAC,CAFhB;MAGI,SAAS,MAAM,WAAW,SAAS,IAApB,CAAN,CAHb;;AAKA,SAAO,QAAQ,MAAf,EAAuB;AACrB,WAAO,EAAE,QAAT,IAAqB,UAAU,KAAV,EAAiB,KAAjB,EAAyB,SAAS,IAAlC,CAArB;AACD;AACD,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,KAAjB","file":"chunk-compiled.js","sourcesContent":["var baseSlice = require('../internal/baseSlice'),\n    isIterateeCall = require('../internal/isIterateeCall');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeFloor = Math.floor,\n    nativeMax = Math.max;\n\n/**\n * Creates an array of elements split into groups the length of `size`.\n * If `collection` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {Array} Returns the new array containing chunks.\n * @example\n *\n * _.chunk(['a', 'b', 'c', 'd'], 2);\n * // => [['a', 'b'], ['c', 'd']]\n *\n * _.chunk(['a', 'b', 'c', 'd'], 3);\n * // => [['a', 'b', 'c'], ['d']]\n */\nfunction chunk(array, size, guard) {\n  if (guard ? isIterateeCall(array, size, guard) : size == null) {\n    size = 1;\n  } else {\n    size = nativeMax(nativeFloor(size) || 1, 1);\n  }\n  var index = 0,\n      length = array ? array.length : 0,\n      resIndex = -1,\n      result = Array(nativeCeil(length / size));\n\n  while (index < length) {\n    result[++resIndex] = baseSlice(array, index, (index += size));\n  }\n  return result;\n}\n\nmodule.exports = chunk;\n"]}