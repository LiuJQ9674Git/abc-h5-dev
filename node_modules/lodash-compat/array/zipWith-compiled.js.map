{"version":3,"sources":["zipWith.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,uBAAR,CAAhB;IACI,YAAY,QAAQ,aAAR,CADhB;;;;;;;;;;;;;;;;;;;AAoBA,IAAI,UAAU,UAAU,UAAS,MAAT,EAAiB;AACvC,MAAI,SAAS,OAAO,MAApB;MACI,WAAW,SAAS,CAAT,GAAa,OAAO,SAAS,CAAhB,CAAb,GAAkC,SADjD;MAEI,UAAU,SAAS,CAAT,GAAa,OAAO,SAAS,CAAhB,CAAb,GAAkC,SAFhD;;AAIA,MAAI,SAAS,CAAT,IAAc,OAAO,QAAP,IAAmB,UAArC,EAAiD;AAC/C,cAAU,CAAV;AACD,GAFD,MAEO;AACL,eAAY,SAAS,CAAT,IAAc,OAAO,OAAP,IAAkB,UAAjC,IAAgD,EAAE,MAAF,EAAU,OAA1D,IAAqE,SAAhF;AACA,cAAU,SAAV;AACD;AACD,SAAO,MAAP,GAAgB,MAAhB;AACA,SAAO,UAAU,MAAV,EAAkB,QAAlB,EAA4B,OAA5B,CAAP;AACD,CAba,CAAd;;AAeA,OAAO,OAAP,GAAiB,OAAjB","file":"zipWith-compiled.js","sourcesContent":["var restParam = require('../function/restParam'),\n    unzipWith = require('./unzipWith');\n\n/**\n * This method is like `_.zip` except that it accepts an iteratee to specify\n * how grouped values should be combined. The `iteratee` is bound to `thisArg`\n * and invoked with four arguments: (accumulator, value, index, group).\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {...Array} [arrays] The arrays to process.\n * @param {Function} [iteratee] The function to combine grouped values.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {Array} Returns the new array of grouped elements.\n * @example\n *\n * _.zipWith([1, 2], [10, 20], [100, 200], _.add);\n * // => [111, 222]\n */\nvar zipWith = restParam(function(arrays) {\n  var length = arrays.length,\n      iteratee = length > 2 ? arrays[length - 2] : undefined,\n      thisArg = length > 1 ? arrays[length - 1] : undefined;\n\n  if (length > 2 && typeof iteratee == 'function') {\n    length -= 2;\n  } else {\n    iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;\n    thisArg = undefined;\n  }\n  arrays.length = length;\n  return unzipWith(arrays, iteratee, thisArg);\n});\n\nmodule.exports = zipWith;\n"]}