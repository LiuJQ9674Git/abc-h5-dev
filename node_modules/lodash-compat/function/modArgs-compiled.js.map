{"version":3,"sources":["modArgs.js"],"names":[],"mappings":"AAAA,IAAI,aAAa,QAAQ,wBAAR,CAAjB;IACI,cAAc,QAAQ,yBAAR,CADlB;IAEI,iBAAiB,QAAQ,4BAAR,CAFrB;IAGI,YAAY,QAAQ,aAAR,CAHhB;;;AAMA,IAAI,kBAAkB,qBAAtB;;;AAGA,IAAI,YAAY,KAAK,GAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,IAAI,UAAU,UAAU,UAAS,IAAT,EAAe,UAAf,EAA2B;AACjD,eAAa,YAAY,UAAZ,CAAb;AACA,MAAI,OAAO,IAAP,IAAe,UAAf,IAA6B,CAAC,WAAW,UAAX,EAAuB,cAAvB,CAAlC,EAA0E;AACxE,UAAM,IAAI,SAAJ,CAAc,eAAd,CAAN;AACD;AACD,MAAI,SAAS,WAAW,MAAxB;AACA,SAAO,UAAU,UAAS,IAAT,EAAe;AAC9B,QAAI,QAAQ,UAAU,KAAK,MAAf,EAAuB,MAAvB,CAAZ;AACA,WAAO,OAAP,EAAgB;AACd,WAAK,KAAL,IAAc,WAAW,KAAX,EAAkB,KAAK,KAAL,CAAlB,CAAd;AACD;AACD,WAAO,KAAK,KAAL,CAAW,IAAX,EAAiB,IAAjB,CAAP;AACD,GANM,CAAP;AAOD,CAba,CAAd;;AAeA,OAAO,OAAP,GAAiB,OAAjB","file":"modArgs-compiled.js","sourcesContent":["var arrayEvery = require('../internal/arrayEvery'),\n    baseFlatten = require('../internal/baseFlatten'),\n    baseIsFunction = require('../internal/baseIsFunction'),\n    restParam = require('./restParam');\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Creates a function that runs each argument through a corresponding\n * transform function.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to wrap.\n * @param {...(Function|Function[])} [transforms] The functions to transform\n * arguments, specified as individual functions or arrays of functions.\n * @returns {Function} Returns the new function.\n * @example\n *\n * function doubled(n) {\n *   return n * 2;\n * }\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * var modded = _.modArgs(function(x, y) {\n *   return [x, y];\n * }, square, doubled);\n *\n * modded(1, 2);\n * // => [1, 4]\n *\n * modded(5, 10);\n * // => [25, 20]\n */\nvar modArgs = restParam(function(func, transforms) {\n  transforms = baseFlatten(transforms);\n  if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var length = transforms.length;\n  return restParam(function(args) {\n    var index = nativeMin(args.length, length);\n    while (index--) {\n      args[index] = transforms[index](args[index]);\n    }\n    return func.apply(this, args);\n  });\n});\n\nmodule.exports = modArgs;\n"]}