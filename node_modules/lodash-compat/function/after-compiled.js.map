{"version":3,"sources":["after.js"],"names":[],"mappings":";AACA,IAAI,kBAAkB,qBAAtB;;;AAGA,IAAI,iBAAiB,OAAO,QAA5B;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAAS,KAAT,CAAe,CAAf,EAAkB,IAAlB,EAAwB;AACtB,MAAI,OAAO,IAAP,IAAe,UAAnB,EAA+B;AAC7B,QAAI,OAAO,CAAP,IAAY,UAAhB,EAA4B;AAC1B,UAAI,OAAO,CAAX;AACA,UAAI,IAAJ;AACA,aAAO,IAAP;AACD,KAJD,MAIO;AACL,YAAM,IAAI,SAAJ,CAAc,eAAd,CAAN;AACD;AACF;AACD,MAAI,eAAe,IAAI,CAAC,CAApB,IAAyB,CAAzB,GAA6B,CAAjC;AACA,SAAO,YAAW;AAChB,QAAI,EAAE,CAAF,GAAM,CAAV,EAAa;AACX,aAAO,KAAK,KAAL,CAAW,IAAX,EAAiB,SAAjB,CAAP;AACD;AACF,GAJD;AAKD;;AAED,OAAO,OAAP,GAAiB,KAAjB","file":"after-compiled.js","sourcesContent":["/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = global.isFinite;\n\n/**\n * The opposite of `_.before`; this method creates a function that invokes\n * `func` once it's called `n` or more times.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {number} n The number of calls before `func` is invoked.\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new restricted function.\n * @example\n *\n * var saves = ['profile', 'settings'];\n *\n * var done = _.after(saves.length, function() {\n *   console.log('done saving!');\n * });\n *\n * _.forEach(saves, function(type) {\n *   asyncSave({ 'type': type, 'complete': done });\n * });\n * // => logs 'done saving!' after the two async saves have completed\n */\nfunction after(n, func) {\n  if (typeof func != 'function') {\n    if (typeof n == 'function') {\n      var temp = n;\n      n = func;\n      func = temp;\n    } else {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n  }\n  n = nativeIsFinite(n = +n) ? n : 0;\n  return function() {\n    if (--n < 1) {\n      return func.apply(this, arguments);\n    }\n  };\n}\n\nmodule.exports = after;\n"]}