{"version":3,"sources":["transform.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,uBAAR,CAAhB;IACI,eAAe,QAAQ,0BAAR,CADnB;IAEI,aAAa,QAAQ,wBAAR,CAFjB;IAGI,aAAa,QAAQ,wBAAR,CAHjB;IAII,UAAU,QAAQ,iBAAR,CAJd;IAKI,aAAa,QAAQ,oBAAR,CALjB;IAMI,WAAW,QAAQ,kBAAR,CANf;IAOI,eAAe,QAAQ,sBAAR,CAPnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,SAAS,SAAT,CAAmB,MAAnB,EAA2B,QAA3B,EAAqC,WAArC,EAAkD,OAAlD,EAA2D;AACzD,MAAI,QAAQ,QAAQ,MAAR,KAAmB,aAAa,MAAb,CAA/B;AACA,aAAW,aAAa,QAAb,EAAuB,OAAvB,EAAgC,CAAhC,CAAX;;AAEA,MAAI,eAAe,IAAnB,EAAyB;AACvB,QAAI,SAAS,SAAS,MAAT,CAAb,EAA+B;AAC7B,UAAI,OAAO,OAAO,WAAlB;AACA,UAAI,KAAJ,EAAW;AACT,sBAAc,QAAQ,MAAR,IAAkB,IAAI,IAAJ,EAAlB,GAA6B,EAA3C;AACD,OAFD,MAEO;AACL,sBAAc,WAAW,WAAW,IAAX,IAAmB,KAAK,SAAxB,GAAoC,SAA/C,CAAd;AACD;AACF,KAPD,MAOO;AACL,oBAAc,EAAd;AACD;AACF;AACD,GAAC,QAAQ,SAAR,GAAoB,UAArB,EAAiC,MAAjC,EAAyC,UAAS,KAAT,EAAgB,KAAhB,EAAuB,MAAvB,EAA+B;AACtE,WAAO,SAAS,WAAT,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,MAApC,CAAP;AACD,GAFD;AAGA,SAAO,WAAP;AACD;;AAED,OAAO,OAAP,GAAiB,SAAjB","file":"transform-compiled.js","sourcesContent":["var arrayEach = require('../internal/arrayEach'),\n    baseCallback = require('../internal/baseCallback'),\n    baseCreate = require('../internal/baseCreate'),\n    baseForOwn = require('../internal/baseForOwn'),\n    isArray = require('../lang/isArray'),\n    isFunction = require('../lang/isFunction'),\n    isObject = require('../lang/isObject'),\n    isTypedArray = require('../lang/isTypedArray');\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own enumerable\n * properties through `iteratee`, with each invocation potentially mutating\n * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked\n * with four arguments: (accumulator, value, key, object). Iteratee functions\n * may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Array|Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * });\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {\n *   result[key] = n * 3;\n * });\n * // => { 'a': 3, 'b': 6 }\n */\nfunction transform(object, iteratee, accumulator, thisArg) {\n  var isArr = isArray(object) || isTypedArray(object);\n  iteratee = baseCallback(iteratee, thisArg, 4);\n\n  if (accumulator == null) {\n    if (isArr || isObject(object)) {\n      var Ctor = object.constructor;\n      if (isArr) {\n        accumulator = isArray(object) ? new Ctor : [];\n      } else {\n        accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);\n      }\n    } else {\n      accumulator = {};\n    }\n  }\n  (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = transform;\n"]}