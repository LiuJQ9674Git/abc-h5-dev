{"version":3,"sources":["invert.js"],"names":[],"mappings":"AAAA,IAAI,iBAAiB,QAAQ,4BAAR,CAArB;IACI,OAAO,QAAQ,QAAR,CADX;;;AAIA,IAAI,cAAc,OAAO,SAAzB;;;AAGA,IAAI,iBAAiB,YAAY,cAAjC;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAAS,MAAT,CAAgB,MAAhB,EAAwB,UAAxB,EAAoC,KAApC,EAA2C;AACzC,MAAI,SAAS,eAAe,MAAf,EAAuB,UAAvB,EAAmC,KAAnC,CAAb,EAAwD;AACtD,iBAAa,SAAb;AACD;AACD,MAAI,QAAQ,CAAC,CAAb;MACI,QAAQ,KAAK,MAAL,CADZ;MAEI,SAAS,MAAM,MAFnB;MAGI,SAAS,EAHb;;AAKA,SAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,QAAI,MAAM,MAAM,KAAN,CAAV;QACI,QAAQ,OAAO,GAAP,CADZ;;AAGA,QAAI,UAAJ,EAAgB;AACd,UAAI,eAAe,IAAf,CAAoB,MAApB,EAA4B,KAA5B,CAAJ,EAAwC;AACtC,eAAO,KAAP,EAAc,IAAd,CAAmB,GAAnB;AACD,OAFD,MAEO;AACL,eAAO,KAAP,IAAgB,CAAC,GAAD,CAAhB;AACD;AACF,KAND,MAOK;AACH,aAAO,KAAP,IAAgB,GAAhB;AACD;AACF;AACD,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,MAAjB","file":"invert-compiled.js","sourcesContent":["var isIterateeCall = require('../internal/isIterateeCall'),\n    keys = require('./keys');\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of the inverted keys and values of `object`.\n * If `object` contains duplicate values, subsequent values overwrite property\n * assignments of previous values unless `multiValue` is `true`.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to invert.\n * @param {boolean} [multiValue] Allow multiple values per key.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {Object} Returns the new inverted object.\n * @example\n *\n * var object = { 'a': 1, 'b': 2, 'c': 1 };\n *\n * _.invert(object);\n * // => { '1': 'c', '2': 'b' }\n *\n * // with `multiValue`\n * _.invert(object, true);\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */\nfunction invert(object, multiValue, guard) {\n  if (guard && isIterateeCall(object, multiValue, guard)) {\n    multiValue = undefined;\n  }\n  var index = -1,\n      props = keys(object),\n      length = props.length,\n      result = {};\n\n  while (++index < length) {\n    var key = props[index],\n        value = object[key];\n\n    if (multiValue) {\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }\n    else {\n      result[value] = key;\n    }\n  }\n  return result;\n}\n\nmodule.exports = invert;\n"]}