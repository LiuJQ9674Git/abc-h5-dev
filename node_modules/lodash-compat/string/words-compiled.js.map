{"version":3,"sources":["words.js"],"names":[],"mappings":"AAAA,IAAI,eAAe,QAAQ,0BAAR,CAAnB;IACI,iBAAiB,QAAQ,4BAAR,CADrB;;;AAIA,IAAI,UAAW,YAAW;AACxB,MAAI,QAAQ,6BAAZ;MACI,QAAQ,8BADZ;;AAGA,SAAO,OAAO,QAAQ,MAAR,GAAiB,KAAjB,GAAyB,KAAzB,GAAiC,IAAjC,GAAwC,KAAxC,GAAgD,GAAhD,GAAsD,KAAtD,GAA8D,GAA9D,GAAoE,KAApE,GAA4E,UAAnF,EAA+F,GAA/F,CAAP;AACD,CALc,EAAf;;;;;;;;;;;;;;;;;;;;AAyBA,SAAS,KAAT,CAAe,MAAf,EAAuB,OAAvB,EAAgC,KAAhC,EAAuC;AACrC,MAAI,SAAS,eAAe,MAAf,EAAuB,OAAvB,EAAgC,KAAhC,CAAb,EAAqD;AACnD,cAAU,SAAV;AACD;AACD,WAAS,aAAa,MAAb,CAAT;AACA,SAAO,OAAO,KAAP,CAAa,WAAW,OAAxB,KAAoC,EAA3C;AACD;;AAED,OAAO,OAAP,GAAiB,KAAjB","file":"words-compiled.js","sourcesContent":["var baseToString = require('../internal/baseToString'),\n    isIterateeCall = require('../internal/isIterateeCall');\n\n/** Used to match words to create compound words. */\nvar reWords = (function() {\n  var upper = '[A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde]',\n      lower = '[a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff]+';\n\n  return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');\n}());\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  if (guard && isIterateeCall(string, pattern, guard)) {\n    pattern = undefined;\n  }\n  string = baseToString(string);\n  return string.match(pattern || reWords) || [];\n}\n\nmodule.exports = words;\n"]}