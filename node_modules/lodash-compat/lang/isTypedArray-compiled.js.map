{"version":3,"sources":["isTypedArray.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,sBAAR,CAAf;IACI,eAAe,QAAQ,0BAAR,CADnB;;;AAIA,IAAI,UAAU,oBAAd;IACI,WAAW,gBADf;IAEI,UAAU,kBAFd;IAGI,UAAU,eAHd;IAII,WAAW,gBAJf;IAKI,UAAU,mBALd;IAMI,SAAS,cANb;IAOI,YAAY,iBAPhB;IAQI,YAAY,iBARhB;IASI,YAAY,iBAThB;IAUI,SAAS,cAVb;IAWI,YAAY,iBAXhB;IAYI,aAAa,kBAZjB;;AAcA,IAAI,iBAAiB,sBAArB;IACI,aAAa,uBADjB;IAEI,aAAa,uBAFjB;IAGI,UAAU,oBAHd;IAII,WAAW,qBAJf;IAKI,WAAW,qBALf;IAMI,WAAW,qBANf;IAOI,kBAAkB,4BAPtB;IAQI,YAAY,sBARhB;IASI,YAAY,sBAThB;;;AAYA,IAAI,iBAAiB,EAArB;AACA,eAAe,UAAf,IAA6B,eAAe,UAAf,IAC7B,eAAe,OAAf,IAA0B,eAAe,QAAf,IAC1B,eAAe,QAAf,IAA2B,eAAe,QAAf,IAC3B,eAAe,eAAf,IAAkC,eAAe,SAAf,IAClC,eAAe,SAAf,IAA4B,IAJ5B;AAKA,eAAe,OAAf,IAA0B,eAAe,QAAf,IAC1B,eAAe,cAAf,IAAiC,eAAe,OAAf,IACjC,eAAe,OAAf,IAA0B,eAAe,QAAf,IAC1B,eAAe,OAAf,IAA0B,eAAe,MAAf,IAC1B,eAAe,SAAf,IAA4B,eAAe,SAAf,IAC5B,eAAe,SAAf,IAA4B,eAAe,MAAf,IAC5B,eAAe,SAAf,IAA4B,eAAe,UAAf,IAA6B,KANzD;;;AASA,IAAI,cAAc,OAAO,SAAzB;;;;;;AAMA,IAAI,cAAc,YAAY,QAA9B;;;;;;;;;;;;;;;;;;AAkBA,SAAS,YAAT,CAAsB,KAAtB,EAA6B;AAC3B,WAAO,aAAa,KAAb,KAAuB,SAAS,MAAM,MAAf,CAAvB,IAAiD,CAAC,CAAC,eAAe,YAAY,IAAZ,CAAiB,KAAjB,CAAf,CAA1D;AACD;;AAED,OAAO,OAAP,GAAiB,YAAjB","file":"isTypedArray-compiled.js","sourcesContent":["var isLength = require('../internal/isLength'),\n    isObjectLike = require('../internal/isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dateTag] = typedArrayTags[errorTag] =\ntypedArrayTags[funcTag] = typedArrayTags[mapTag] =\ntypedArrayTags[numberTag] = typedArrayTags[objectTag] =\ntypedArrayTags[regexpTag] = typedArrayTags[setTag] =\ntypedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nfunction isTypedArray(value) {\n  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];\n}\n\nmodule.exports = isTypedArray;\n"]}