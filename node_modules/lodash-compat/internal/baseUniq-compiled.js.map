{"version":3,"sources":["baseUniq.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,eAAR,CAAlB;IACI,eAAe,QAAQ,gBAAR,CADnB;IAEI,cAAc,QAAQ,eAAR,CAFlB;;;AAKA,IAAI,mBAAmB,GAAvB;;;;;;;;;;;AAWA,SAAS,QAAT,CAAkB,KAAlB,EAAyB,QAAzB,EAAmC;AACjC,MAAI,QAAQ,CAAC,CAAb;MACI,UAAU,WADd;MAEI,SAAS,MAAM,MAFnB;MAGI,WAAW,IAHf;MAII,UAAU,YAAY,UAAU,gBAJpC;MAKI,OAAO,UAAU,aAAV,GAA0B,IALrC;MAMI,SAAS,EANb;;AAQA,MAAI,IAAJ,EAAU;AACR,cAAU,YAAV;AACA,eAAW,KAAX;AACD,GAHD,MAGO;AACL,cAAU,KAAV;AACA,WAAO,WAAW,EAAX,GAAgB,MAAvB;AACD;AACD,SACA,OAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,QAAI,QAAQ,MAAM,KAAN,CAAZ;QACI,WAAW,WAAW,SAAS,KAAT,EAAgB,KAAhB,EAAuB,KAAvB,CAAX,GAA2C,KAD1D;;AAGA,QAAI,YAAY,UAAU,KAA1B,EAAiC;AAC/B,UAAI,YAAY,KAAK,MAArB;AACA,aAAO,WAAP,EAAoB;AAClB,YAAI,KAAK,SAAL,MAAoB,QAAxB,EAAkC;AAChC,mBAAS,KAAT;AACD;AACF;AACD,UAAI,QAAJ,EAAc;AACZ,aAAK,IAAL,CAAU,QAAV;AACD;AACD,aAAO,IAAP,CAAY,KAAZ;AACD,KAXD,MAYK,IAAI,QAAQ,IAAR,EAAc,QAAd,EAAwB,CAAxB,IAA6B,CAAjC,EAAoC;AACvC,UAAI,YAAY,OAAhB,EAAyB;AACvB,aAAK,IAAL,CAAU,QAAV;AACD;AACD,aAAO,IAAP,CAAY,KAAZ;AACD;AACF;AACD,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,QAAjB","file":"baseUniq-compiled.js","sourcesContent":["var baseIndexOf = require('./baseIndexOf'),\n    cacheIndexOf = require('./cacheIndexOf'),\n    createCache = require('./createCache');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniq` without support for callback shorthands\n * and `this` binding.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The function invoked per iteration.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee) {\n  var index = -1,\n      indexOf = baseIndexOf,\n      length = array.length,\n      isCommon = true,\n      isLarge = isCommon && length >= LARGE_ARRAY_SIZE,\n      seen = isLarge ? createCache() : null,\n      result = [];\n\n  if (seen) {\n    indexOf = cacheIndexOf;\n    isCommon = false;\n  } else {\n    isLarge = false;\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value, index, array) : value;\n\n    if (isCommon && value === value) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (indexOf(seen, computed, 0) < 0) {\n      if (iteratee || isLarge) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseUniq;\n"]}