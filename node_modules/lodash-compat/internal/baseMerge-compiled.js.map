{"version":3,"sources":["baseMerge.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,aAAR,CAAhB;IACI,gBAAgB,QAAQ,iBAAR,CADpB;IAEI,UAAU,QAAQ,iBAAR,CAFd;IAGI,cAAc,QAAQ,eAAR,CAHlB;IAII,WAAW,QAAQ,kBAAR,CAJf;IAKI,eAAe,QAAQ,gBAAR,CALnB;IAMI,eAAe,QAAQ,sBAAR,CANnB;IAOI,OAAO,QAAQ,gBAAR,CAPX;;;;;;;;;;;;;;AAqBA,SAAS,SAAT,CAAmB,MAAnB,EAA2B,MAA3B,EAAmC,UAAnC,EAA+C,MAA/C,EAAuD,MAAvD,EAA+D;AAC7D,MAAI,CAAC,SAAS,MAAT,CAAL,EAAuB;AACrB,WAAO,MAAP;AACD;AACD,MAAI,WAAW,YAAY,MAAZ,MAAwB,QAAQ,MAAR,KAAmB,aAAa,MAAb,CAA3C,CAAf;MACI,QAAQ,WAAW,SAAX,GAAuB,KAAK,MAAL,CADnC;;AAGA,YAAU,SAAS,MAAnB,EAA2B,UAAS,QAAT,EAAmB,GAAnB,EAAwB;AACjD,QAAI,KAAJ,EAAW;AACT,YAAM,QAAN;AACA,iBAAW,OAAO,GAAP,CAAX;AACD;AACD,QAAI,aAAa,QAAb,CAAJ,EAA4B;AAC1B,iBAAW,SAAS,EAApB;AACA,iBAAW,SAAS,EAApB;AACA,oBAAc,MAAd,EAAsB,MAAtB,EAA8B,GAA9B,EAAmC,SAAnC,EAA8C,UAA9C,EAA0D,MAA1D,EAAkE,MAAlE;AACD,KAJD,MAKK;AACH,UAAI,QAAQ,OAAO,GAAP,CAAZ;UACI,SAAS,aAAa,WAAW,KAAX,EAAkB,QAAlB,EAA4B,GAA5B,EAAiC,MAAjC,EAAyC,MAAzC,CAAb,GAAgE,SAD7E;UAEI,WAAW,WAAW,SAF1B;;AAIA,UAAI,QAAJ,EAAc;AACZ,iBAAS,QAAT;AACD;AACD,UAAI,CAAC,WAAW,SAAX,IAAyB,YAAY,EAAE,OAAO,MAAT,CAAtC,MACC,aAAa,WAAW,MAAX,GAAqB,WAAW,KAAhC,GAA0C,UAAU,KAAjE,CADD,CAAJ,EACgF;AAC9E,eAAO,GAAP,IAAc,MAAd;AACD;AACF;AACF,GAvBD;AAwBA,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,SAAjB","file":"baseMerge-compiled.js","sourcesContent":["var arrayEach = require('./arrayEach'),\n    baseMergeDeep = require('./baseMergeDeep'),\n    isArray = require('../lang/isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isObject = require('../lang/isObject'),\n    isObjectLike = require('./isObjectLike'),\n    isTypedArray = require('../lang/isTypedArray'),\n    keys = require('../object/keys');\n\n/**\n * The base implementation of `_.merge` without support for argument juggling,\n * multiple sources, and `this` binding `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Array} [stackA=[]] Tracks traversed source objects.\n * @param {Array} [stackB=[]] Associates values with source counterparts.\n * @returns {Object} Returns `object`.\n */\nfunction baseMerge(object, source, customizer, stackA, stackB) {\n  if (!isObject(object)) {\n    return object;\n  }\n  var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),\n      props = isSrcArr ? undefined : keys(source);\n\n  arrayEach(props || source, function(srcValue, key) {\n    if (props) {\n      key = srcValue;\n      srcValue = source[key];\n    }\n    if (isObjectLike(srcValue)) {\n      stackA || (stackA = []);\n      stackB || (stackB = []);\n      baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);\n    }\n    else {\n      var value = object[key],\n          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,\n          isCommon = result === undefined;\n\n      if (isCommon) {\n        result = srcValue;\n      }\n      if ((result !== undefined || (isSrcArr && !(key in object))) &&\n          (isCommon || (result === result ? (result !== value) : (value === value)))) {\n        object[key] = result;\n      }\n    }\n  });\n  return object;\n}\n\nmodule.exports = baseMerge;\n"]}