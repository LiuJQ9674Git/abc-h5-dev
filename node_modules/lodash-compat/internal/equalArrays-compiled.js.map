{"version":3,"sources":["equalArrays.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,aAAR,CAAhB;;;;;;;;;;;;;;;;AAgBA,SAAS,WAAT,CAAqB,KAArB,EAA4B,KAA5B,EAAmC,SAAnC,EAA8C,UAA9C,EAA0D,OAA1D,EAAmE,MAAnE,EAA2E,MAA3E,EAAmF;AACjF,MAAI,QAAQ,CAAC,CAAb;MACI,YAAY,MAAM,MADtB;MAEI,YAAY,MAAM,MAFtB;;AAIA,MAAI,aAAa,SAAb,IAA0B,EAAE,WAAW,YAAY,SAAzB,CAA9B,EAAmE;AACjE,WAAO,KAAP;AACD;;AAED,SAAO,EAAE,KAAF,GAAU,SAAjB,EAA4B;AAC1B,QAAI,WAAW,MAAM,KAAN,CAAf;QACI,WAAW,MAAM,KAAN,CADf;QAEI,SAAS,aAAa,WAAW,UAAU,QAAV,GAAqB,QAAhC,EAA0C,UAAU,QAAV,GAAqB,QAA/D,EAAyE,KAAzE,CAAb,GAA+F,SAF5G;;AAIA,QAAI,WAAW,SAAf,EAA0B;AACxB,UAAI,MAAJ,EAAY;AACV;AACD;AACD,aAAO,KAAP;AACD;;AAED,QAAI,OAAJ,EAAa;AACX,UAAI,CAAC,UAAU,KAAV,EAAiB,UAAS,QAAT,EAAmB;AACnC,eAAO,aAAa,QAAb,IAAyB,UAAU,QAAV,EAAoB,QAApB,EAA8B,UAA9B,EAA0C,OAA1C,EAAmD,MAAnD,EAA2D,MAA3D,CAAhC;AACD,OAFA,CAAL,EAEQ;AACN,eAAO,KAAP;AACD;AACF,KAND,MAMO,IAAI,EAAE,aAAa,QAAb,IAAyB,UAAU,QAAV,EAAoB,QAApB,EAA8B,UAA9B,EAA0C,OAA1C,EAAmD,MAAnD,EAA2D,MAA3D,CAA3B,CAAJ,EAAoG;AACzG,aAAO,KAAP;AACD;AACF;AACD,SAAO,IAAP;AACD;;AAED,OAAO,OAAP,GAAiB,WAAjB","file":"equalArrays-compiled.js","sourcesContent":["var arraySome = require('./arraySome');\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparing arrays.\n * @param {boolean} [isLoose] Specify performing partial comparisons.\n * @param {Array} [stackA] Tracks traversed `value` objects.\n * @param {Array} [stackB] Tracks traversed `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {\n  var index = -1,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {\n    return false;\n  }\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index],\n        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;\n\n    if (result !== undefined) {\n      if (result) {\n        continue;\n      }\n      return false;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (isLoose) {\n      if (!arraySome(other, function(othValue) {\n            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);\n          })) {\n        return false;\n      }\n    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = equalArrays;\n"]}