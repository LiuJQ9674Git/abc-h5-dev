{"version":3,"sources":["isLaziable.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,eAAR,CAAlB;IACI,UAAU,QAAQ,WAAR,CADd;IAEI,cAAc,QAAQ,eAAR,CAFlB;IAGI,SAAS,QAAQ,iBAAR,CAHb;;;;;;;;;AAYA,SAAS,UAAT,CAAoB,IAApB,EAA0B;AACxB,MAAI,WAAW,YAAY,IAAZ,CAAf;MACI,QAAQ,OAAO,QAAP,CADZ;;AAGA,MAAI,OAAO,KAAP,IAAgB,UAAhB,IAA8B,EAAE,YAAY,YAAY,SAA1B,CAAlC,EAAwE;AACtE,WAAO,KAAP;AACD;AACD,MAAI,SAAS,KAAb,EAAoB;AAClB,WAAO,IAAP;AACD;AACD,MAAI,OAAO,QAAQ,KAAR,CAAX;AACA,SAAO,CAAC,CAAC,IAAF,IAAU,SAAS,KAAK,CAAL,CAA1B;AACD;;AAED,OAAO,OAAP,GAAiB,UAAjB","file":"isLaziable-compiled.js","sourcesContent":["var LazyWrapper = require('./LazyWrapper'),\n    getData = require('./getData'),\n    getFuncName = require('./getFuncName'),\n    lodash = require('../chain/lodash');\n\n/**\n * Checks if `func` has a lazy counterpart.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.\n */\nfunction isLaziable(func) {\n  var funcName = getFuncName(func),\n      other = lodash[funcName];\n\n  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n    return false;\n  }\n  if (func === other) {\n    return true;\n  }\n  var data = getData(other);\n  return !!data && func === data[0];\n}\n\nmodule.exports = isLaziable;\n"]}