{"version":3,"sources":["createWrapper.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,eAAR,CAAlB;IACI,oBAAoB,QAAQ,qBAAR,CADxB;IAEI,sBAAsB,QAAQ,uBAAR,CAF1B;IAGI,uBAAuB,QAAQ,wBAAR,CAH3B;IAII,UAAU,QAAQ,WAAR,CAJd;IAKI,YAAY,QAAQ,aAAR,CALhB;IAMI,UAAU,QAAQ,WAAR,CANd;;;AASA,IAAI,YAAY,CAAhB;IACI,gBAAgB,CADpB;IAEI,eAAe,EAFnB;IAGI,qBAAqB,EAHzB;;;AAMA,IAAI,kBAAkB,qBAAtB;;;AAGA,IAAI,YAAY,KAAK,GAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAAS,aAAT,CAAuB,IAAvB,EAA6B,OAA7B,EAAsC,OAAtC,EAA+C,QAA/C,EAAyD,OAAzD,EAAkE,MAAlE,EAA0E,GAA1E,EAA+E,KAA/E,EAAsF;AACpF,MAAI,YAAY,UAAU,aAA1B;AACA,MAAI,CAAC,SAAD,IAAc,OAAO,IAAP,IAAe,UAAjC,EAA6C;AAC3C,UAAM,IAAI,SAAJ,CAAc,eAAd,CAAN;AACD;AACD,MAAI,SAAS,WAAW,SAAS,MAApB,GAA6B,CAA1C;AACA,MAAI,CAAC,MAAL,EAAa;AACX,eAAW,EAAE,eAAe,kBAAjB,CAAX;AACA,eAAW,UAAU,SAArB;AACD;AACD,YAAW,UAAU,QAAQ,MAAlB,GAA2B,CAAtC;AACA,MAAI,UAAU,kBAAd,EAAkC;AAChC,QAAI,gBAAgB,QAApB;QACI,eAAe,OADnB;;AAGA,eAAW,UAAU,SAArB;AACD;AACD,MAAI,OAAO,YAAY,SAAZ,GAAwB,QAAQ,IAAR,CAAnC;MACI,UAAU,CAAC,IAAD,EAAO,OAAP,EAAgB,OAAhB,EAAyB,QAAzB,EAAmC,OAAnC,EAA4C,aAA5C,EAA2D,YAA3D,EAAyE,MAAzE,EAAiF,GAAjF,EAAsF,KAAtF,CADd;;AAGA,MAAI,IAAJ,EAAU;AACR,cAAU,OAAV,EAAmB,IAAnB;AACA,cAAU,QAAQ,CAAR,CAAV;AACA,YAAQ,QAAQ,CAAR,CAAR;AACD;AACD,UAAQ,CAAR,IAAa,SAAS,IAAT,GACR,YAAY,CAAZ,GAAgB,KAAK,MADb,GAER,UAAU,QAAQ,MAAlB,EAA0B,CAA1B,KAAgC,CAFrC;;AAIA,MAAI,WAAW,SAAf,EAA0B;AACxB,QAAI,SAAS,kBAAkB,QAAQ,CAAR,CAAlB,EAA8B,QAAQ,CAAR,CAA9B,CAAb;AACD,GAFD,MAEO,IAAI,CAAC,WAAW,YAAX,IAA2B,YAAY,YAAY,YAAxB,CAA5B,KAAsE,CAAC,QAAQ,CAAR,EAAW,MAAtF,EAA8F;AACnG,aAAS,qBAAqB,KAArB,CAA2B,SAA3B,EAAsC,OAAtC,CAAT;AACD,GAFM,MAEA;AACL,aAAS,oBAAoB,KAApB,CAA0B,SAA1B,EAAqC,OAArC,CAAT;AACD;AACD,MAAI,SAAS,OAAO,WAAP,GAAqB,OAAlC;AACA,SAAO,OAAO,MAAP,EAAe,OAAf,CAAP;AACD;;AAED,OAAO,OAAP,GAAiB,aAAjB","file":"createWrapper-compiled.js","sourcesContent":["var baseSetData = require('./baseSetData'),\n    createBindWrapper = require('./createBindWrapper'),\n    createHybridWrapper = require('./createHybridWrapper'),\n    createPartialWrapper = require('./createPartialWrapper'),\n    getData = require('./getData'),\n    mergeData = require('./mergeData'),\n    setData = require('./setData');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar BIND_FLAG = 1,\n    BIND_KEY_FLAG = 2,\n    PARTIAL_FLAG = 32,\n    PARTIAL_RIGHT_FLAG = 64;\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates a function that either curries or invokes `func` with optional\n * `this` binding and partially applied arguments.\n *\n * @private\n * @param {Function|string} func The function or method name to reference.\n * @param {number} bitmask The bitmask of flags.\n *  The bitmask may be composed of the following flags:\n *     1 - `_.bind`\n *     2 - `_.bindKey`\n *     4 - `_.curry` or `_.curryRight` of a bound function\n *     8 - `_.curry`\n *    16 - `_.curryRight`\n *    32 - `_.partial`\n *    64 - `_.partialRight`\n *   128 - `_.rearg`\n *   256 - `_.ary`\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to be partially applied.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n  var isBindKey = bitmask & BIND_KEY_FLAG;\n  if (!isBindKey && typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var length = partials ? partials.length : 0;\n  if (!length) {\n    bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);\n    partials = holders = undefined;\n  }\n  length -= (holders ? holders.length : 0);\n  if (bitmask & PARTIAL_RIGHT_FLAG) {\n    var partialsRight = partials,\n        holdersRight = holders;\n\n    partials = holders = undefined;\n  }\n  var data = isBindKey ? undefined : getData(func),\n      newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];\n\n  if (data) {\n    mergeData(newData, data);\n    bitmask = newData[1];\n    arity = newData[9];\n  }\n  newData[9] = arity == null\n    ? (isBindKey ? 0 : func.length)\n    : (nativeMax(arity - length, 0) || 0);\n\n  if (bitmask == BIND_FLAG) {\n    var result = createBindWrapper(newData[0], newData[2]);\n  } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {\n    result = createPartialWrapper.apply(undefined, newData);\n  } else {\n    result = createHybridWrapper.apply(undefined, newData);\n  }\n  var setter = data ? baseSetData : setData;\n  return setter(result, newData);\n}\n\nmodule.exports = createWrapper;\n"]}