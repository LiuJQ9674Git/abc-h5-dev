{"version":3,"sources":["baseDifference.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,eAAR,CAAlB;IACI,eAAe,QAAQ,gBAAR,CADnB;IAEI,cAAc,QAAQ,eAAR,CAFlB;;;AAKA,IAAI,mBAAmB,GAAvB;;;;;;;;;;;AAWA,SAAS,cAAT,CAAwB,KAAxB,EAA+B,MAA/B,EAAuC;AACrC,MAAI,SAAS,QAAQ,MAAM,MAAd,GAAuB,CAApC;MACI,SAAS,EADb;;AAGA,MAAI,CAAC,MAAL,EAAa;AACX,WAAO,MAAP;AACD;AACD,MAAI,QAAQ,CAAC,CAAb;MACI,UAAU,WADd;MAEI,WAAW,IAFf;MAGI,QAAS,YAAY,OAAO,MAAP,IAAiB,gBAA9B,GAAkD,YAAY,MAAZ,CAAlD,GAAwE,IAHpF;MAII,eAAe,OAAO,MAJ1B;;AAMA,MAAI,KAAJ,EAAW;AACT,cAAU,YAAV;AACA,eAAW,KAAX;AACA,aAAS,KAAT;AACD;AACD,SACA,OAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,QAAI,QAAQ,MAAM,KAAN,CAAZ;;AAEA,QAAI,YAAY,UAAU,KAA1B,EAAiC;AAC/B,UAAI,cAAc,YAAlB;AACA,aAAO,aAAP,EAAsB;AACpB,YAAI,OAAO,WAAP,MAAwB,KAA5B,EAAmC;AACjC,mBAAS,KAAT;AACD;AACF;AACD,aAAO,IAAP,CAAY,KAAZ;AACD,KARD,MASK,IAAI,QAAQ,MAAR,EAAgB,KAAhB,EAAuB,CAAvB,IAA4B,CAAhC,EAAmC;AACtC,aAAO,IAAP,CAAY,KAAZ;AACD;AACF;AACD,SAAO,MAAP;AACD;;AAED,OAAO,OAAP,GAAiB,cAAjB","file":"baseDifference-compiled.js","sourcesContent":["var baseIndexOf = require('./baseIndexOf'),\n    cacheIndexOf = require('./cacheIndexOf'),\n    createCache = require('./createCache');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.difference` which accepts a single array\n * of values to exclude.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values) {\n  var length = array ? array.length : 0,\n      result = [];\n\n  if (!length) {\n    return result;\n  }\n  var index = -1,\n      indexOf = baseIndexOf,\n      isCommon = true,\n      cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,\n      valuesLength = values.length;\n\n  if (cache) {\n    indexOf = cacheIndexOf;\n    isCommon = false;\n    values = cache;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index];\n\n    if (isCommon && value === value) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === value) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (indexOf(values, value, 0) < 0) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseDifference;\n"]}