{"version":3,"sources":["baseGet.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,YAAR,CAAf;;;;;;;;;;;;AAYA,SAAS,OAAT,CAAiB,MAAjB,EAAyB,IAAzB,EAA+B,OAA/B,EAAwC;AACtC,MAAI,UAAU,IAAd,EAAoB;AAClB;AACD;AACD,WAAS,SAAS,MAAT,CAAT;AACA,MAAI,YAAY,SAAZ,IAAyB,WAAW,MAAxC,EAAgD;AAC9C,WAAO,CAAC,OAAD,CAAP;AACD;AACD,MAAI,QAAQ,CAAZ;MACI,SAAS,KAAK,MADlB;;AAGA,SAAO,UAAU,IAAV,IAAkB,QAAQ,MAAjC,EAAyC;AACvC,aAAS,SAAS,MAAT,EAAiB,KAAK,OAAL,CAAjB,CAAT;AACD;AACD,SAAQ,SAAS,SAAS,MAAnB,GAA6B,MAA7B,GAAsC,SAA7C;AACD;;AAED,OAAO,OAAP,GAAiB,OAAjB","file":"baseGet-compiled.js","sourcesContent":["var toObject = require('./toObject');\n\n/**\n * The base implementation of `get` without support for string paths\n * and default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path of the property to get.\n * @param {string} [pathKey] The key representation of path.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path, pathKey) {\n  if (object == null) {\n    return;\n  }\n  object = toObject(object);\n  if (pathKey !== undefined && pathKey in object) {\n    path = [pathKey];\n  }\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = toObject(object)[path[index++]];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n"]}