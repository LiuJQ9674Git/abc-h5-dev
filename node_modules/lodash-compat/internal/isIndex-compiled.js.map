{"version":3,"sources":["isIndex.js"],"names":[],"mappings":";AACA,IAAI,WAAW,OAAf;;;;;;AAMA,IAAI,mBAAmB,gBAAvB;;;;;;;;;;AAUA,SAAS,OAAT,CAAiB,KAAjB,EAAwB,MAAxB,EAAgC;AAC9B,UAAS,OAAO,KAAP,IAAgB,QAAhB,IAA4B,SAAS,IAAT,CAAc,KAAd,CAA7B,GAAqD,CAAC,KAAtD,GAA8D,CAAC,CAAvE;AACA,WAAS,UAAU,IAAV,GAAiB,gBAAjB,GAAoC,MAA7C;AACA,SAAO,QAAQ,CAAC,CAAT,IAAc,QAAQ,CAAR,IAAa,CAA3B,IAAgC,QAAQ,MAA/C;AACD;;AAED,OAAO,OAAP,GAAiB,OAAjB","file":"isIndex-compiled.js","sourcesContent":["/** Used to detect unsigned integer values. */\nvar reIsUint = /^\\d+$/;\n\n/**\n * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return value > -1 && value % 1 == 0 && value < length;\n}\n\nmodule.exports = isIndex;\n"]}