{"version":3,"sources":["scope.js"],"names":[],"mappings":"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","file":"scope-compiled.js","sourcesContent":["\"use strict\";\n\nconst assert = require(\"assert\");\nconst stringmap = require(\"stringmap\");\nconst stringset = require(\"stringset\");\nconst is = require(\"simple-is\");\nconst fmt = require(\"simple-fmt\");\nconst error = require(\"./error\");\nconst getline = error.getline;\nconst options = require(\"./options\");\n\nfunction Scope(args) {\n    assert(is.someof(args.kind, [\"hoist\", \"block\", \"catch-block\"]));\n    assert(is.object(args.node));\n    assert(args.parent === null || is.object(args.parent));\n\n    // kind === \"hoist\": function scopes, program scope, injected globals\n    // kind === \"block\": ES6 block scopes\n    // kind === \"catch-block\": catch block scopes\n    this.kind = args.kind;\n\n    // the AST node the block corresponds to\n    this.node = args.node;\n\n    // parent scope\n    this.parent = args.parent;\n\n    // children scopes for easier traversal (populated internally)\n    this.children = [];\n\n    // scope declarations. decls[variable_name] = {\n    //     kind: \"fun\" for functions,\n    //           \"param\" for function parameters,\n    //           \"caught\" for catch parameter\n    //           \"var\",\n    //           \"const\",\n    //           \"let\"\n    //     node: the AST node the declaration corresponds to\n    //     from: source code index from which it is visible at earliest\n    //           (only stored for \"const\", \"let\" [and \"var\"] nodes)\n    // }\n    this.decls = stringmap();\n\n    // names of all declarations within this scope that was ever written\n    // TODO move to decls.w?\n    // TODO create corresponding read?\n    this.written = stringset();\n\n    // names of all variables declared outside this hoist scope but\n    // referenced in this scope (immediately or in child).\n    // only stored on hoist scopes for efficiency\n    // (because we currently generate lots of empty block scopes)\n    this.propagates = (this.kind === \"hoist\" ? stringset() : null);\n\n    // scopes register themselves with their parents for easier traversal\n    if (this.parent) {\n        this.parent.children.push(this);\n    }\n}\n\nScope.prototype.print = function(indent) {\n    indent = indent || 0;\n    const scope = this;\n    const names = this.decls.keys().map(function(name) {\n        return fmt(\"{0} [{1}]\", name, scope.decls.get(name).kind);\n    }).join(\", \");\n    const propagates = this.propagates ? this.propagates.items().join(\", \") : \"\";\n    console.log(fmt(\"{0}{1}: {2}. propagates: {3}\", fmt.repeat(\" \", indent), this.node.type, names, propagates));\n    this.children.forEach(function(c) {\n        c.print(indent + 2);\n    });\n};\n\nScope.prototype.add = function(name, kind, node, referableFromPos) {\n    assert(is.someof(kind, [\"fun\", \"param\", \"var\", \"caught\", \"const\", \"let\"]));\n\n    function isConstLet(kind) {\n        return is.someof(kind, [\"const\", \"let\"]);\n    }\n\n    let scope = this;\n\n    // search nearest hoist-scope for fun, param and var's\n    // const, let and caught variables go directly in the scope (which may be hoist, block or catch-block)\n    if (is.someof(kind, [\"fun\", \"param\", \"var\"])) {\n        while (scope.kind !== \"hoist\") {\n            if (scope.decls.has(name) && isConstLet(scope.decls.get(name).kind)) { // could be caught\n                return error(getline(node), \"{0} is already declared\", name);\n            }\n            scope = scope.parent;\n        }\n    }\n    // name exists in scope and either new or existing kind is const|let => error\n    if (scope.decls.has(name) && (options.disallowDuplicated || isConstLet(scope.decls.get(name).kind) || isConstLet(kind))) {\n        return error(getline(node), \"{0} is already declared\", name);\n    }\n\n    const declaration = {\n        kind: kind,\n        node: node,\n    };\n    if (referableFromPos) {\n        assert(is.someof(kind, [\"var\", \"const\", \"let\"]));\n        declaration.from = referableFromPos;\n    }\n    scope.decls.set(name, declaration);\n};\n\nScope.prototype.getKind = function(name) {\n    assert(is.string(name));\n    const decl = this.decls.get(name);\n    return decl ? decl.kind : null;\n};\n\nScope.prototype.getNode = function(name) {\n    assert(is.string(name));\n    const decl = this.decls.get(name);\n    return decl ? decl.node : null;\n};\n\nScope.prototype.getFromPos = function(name) {\n    assert(is.string(name));\n    const decl = this.decls.get(name);\n    return decl ? decl.from : null;\n};\n\nScope.prototype.hasOwn = function(name) {\n    return this.decls.has(name);\n};\n\nScope.prototype.remove = function(name) {\n    return this.decls.remove(name);\n};\n\nScope.prototype.doesPropagate = function(name) {\n    return this.propagates.has(name);\n};\n\nScope.prototype.markPropagates = function(name) {\n    this.propagates.add(name);\n};\n\nScope.prototype.closestHoistScope = function() {\n    let scope = this;\n    while (scope.kind !== \"hoist\") {\n        scope = scope.parent;\n    }\n    return scope;\n};\n\nScope.prototype.hasFunctionScopeBetween = function(outer) {\n    function isFunction(node) {\n        return is.someof(node.type, [\"FunctionDeclaration\", \"FunctionExpression\"]);\n    }\n\n    for (let scope = this; scope; scope = scope.parent) {\n        if (scope === outer) {\n            return false;\n        }\n        if (isFunction(scope.node)) {\n            return true;\n        }\n    }\n\n    throw new Error(\"wasn't inner scope of outer\");\n};\n\nScope.prototype.lookup = function(name) {\n    for (let scope = this; scope; scope = scope.parent) {\n        if (scope.decls.has(name)) {\n            return scope;\n        } else if (scope.kind === \"hoist\") {\n            scope.propagates.add(name);\n        }\n    }\n    return null;\n};\n\nScope.prototype.markWrite = function(name) {\n    assert(is.string(name));\n    this.written.add(name);\n};\n\n// detects let variables that are never modified (ignores top-level)\nScope.prototype.detectUnmodifiedLets = function() {\n    const outmost = this;\n\n    function detect(scope) {\n        if (scope !== outmost) {\n            scope.decls.keys().forEach(function(name) {\n                if (scope.getKind(name) === \"let\" && !scope.written.has(name)) {\n                    return error(getline(scope.getNode(name)), \"{0} is declared as let but never modified so could be const\", name);\n                }\n            });\n        }\n\n        scope.children.forEach(function(childScope) {\n            detect(childScope);\n        });\n    }\n    detect(this);\n};\n\nScope.prototype.traverse = function(options) {\n    options = options || {};\n    const pre = options.pre;\n    const post = options.post;\n\n    function visit(scope) {\n        if (pre) {\n            pre(scope);\n        }\n        scope.children.forEach(function(childScope) {\n            visit(childScope);\n        });\n        if (post) {\n            post(scope);\n        }\n    }\n\n    visit(this);\n};\n\nmodule.exports = Scope;\n"]}