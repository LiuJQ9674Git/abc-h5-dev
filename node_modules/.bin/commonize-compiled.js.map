{"version":3,"sources":["commonize"],"names":[],"mappings":";;AAEA,QAAQ,UAAR,EAAoB,OAApB,CAA4B,UAAS,EAAT,EAAa;AACrC,QAAI,UAAU,IAAd;;AAEA,WAAO,QAAQ,YAAR,GAAuB,IAAvB,CAA4B,UAAS,QAAT,EAAmB;;;AAGlD,YAAI,SAAS,cAAT,CAAwB,EAAxB,CAAJ,EACI,OAAO,QAAQ,SAAR,CAAkB,SAAS,EAAT,CAAlB,CAAP;AACP,KALM,CAAP;AAOH,CAVD,EAUG,UAAS,EAAT,EAAa;;AAEZ,WAAO,KAAK,WAAL,CAAiB,EAAjB,CAAP;AAEH,CAdD,EAcG,OAdH,CAcW,UAAS,EAAT,EAAa,MAAb,EAAqB;;;AAG5B,WAAO,OAAO,OAAP,CAAe,OAAf,EAAwB,IAAxB,CAAP;AACH,CAlBD","file":"commonize-compiled.js","sourcesContent":["#!/usr/bin/env node\n\nrequire(\"commoner\").resolve(function(id) {\n    var context = this;\n\n    return context.getProvidedP().then(function(idToPath) {\n        // If a module declares its own identifier using @providesModule\n        // then that identifier will be a key in the idToPath object.\n        if (idToPath.hasOwnProperty(id))\n            return context.readFileP(idToPath[id]);\n    });\n\n}, function(id) {\n    // Otherwise assume the identifier maps directly to a filesystem path.\n    return this.readModuleP(id);\n\n}).process(function(id, source) {\n    // As a simple example of a processing step, make sure the file ends\n    // with exactly one newline character.\n    return source.replace(/\\s+$/m, \"\\n\");\n});\n"]}