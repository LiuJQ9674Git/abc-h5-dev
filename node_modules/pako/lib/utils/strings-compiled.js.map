{"version":3,"sources":["strings.js"],"names":[],"mappings":"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","file":"strings-compiled.js","sourcesContent":["// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safary\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [0]); } catch(__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch(__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q=0; q<256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254]=_utf8len[254]=1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n      c2 = str.charCodeAt(m_pos+1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i=0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n      c2 = str.charCodeAt(m_pos+1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // use fallback for big arrays to avoid stack overflow\n  if (len < 65537) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i=0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function(buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function(str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i=0, len=buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len*2);\n\n  for (out=0, i=0; i<len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function(buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max-1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Fuckup - very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means vuffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n"]}