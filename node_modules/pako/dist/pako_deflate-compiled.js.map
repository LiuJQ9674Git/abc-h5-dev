{"version":3,"sources":["pako_deflate.js"],"names":[],"mappings":"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","file":"pako_deflate-compiled.js","sourcesContent":["/* pako 0.2.8 nodeca/pako */(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.pako = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (source.hasOwnProperty(p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs+len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i=0; i<len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function(chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i=0, l=chunks.length; i<l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i=0, l=chunks.length; i<l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i=0; i<len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function(chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n\n},{}],2:[function(require,module,exports){\n// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safary\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [0]); } catch(__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch(__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q=0; q<256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254]=_utf8len[254]=1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n      c2 = str.charCodeAt(m_pos+1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i=0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n      c2 = str.charCodeAt(m_pos+1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // use fallback for big arrays to avoid stack overflow\n  if (len < 65537) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i=0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function(buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function(str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i=0, len=buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len*2);\n\n  for (out=0, i=0; i<len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function(buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max-1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Fuckup - very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means vuffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n},{\"./common\":1}],3:[function(require,module,exports){\n'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It doesn't worth to make additional optimizationa as in original.\n// Small size is preferable.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n =0; n < 256; n++) {\n    c = n;\n    for (var k =0; k < 8; k++) {\n      c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc = crc ^ (-1);\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg   = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2*L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only (s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH-1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH-1)) ? s.strstart : MIN_MATCH-1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH-1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size-MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH-1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1- s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length-1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH-1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH-1 ? s.strstart : MIN_MATCH-1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nvar Config = function (good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n};\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2*D_CODES+1) * 2);\n  this.bl_tree    = new utils.Buf16((2*BL_CODES+1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS+1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2*L_CODES+1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2*L_CODES+1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  s.d_buf = s.lit_bufsize >> 1;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n                );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n/* =========================================================================\n * Copy the source state to the destination state\n */\n//function deflateCopy(dest, source) {\n//\n//}\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n\n},{\"../utils/common\":1,\"./adler32\":3,\"./crc32\":4,\"./messages\":6,\"./trees\":7}],6:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  '2':    'need dictionary',     /* Z_NEED_DICT       2  */\n  '1':    'stream end',          /* Z_STREAM_END      1  */\n  '0':    '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2*L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES+2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH-MIN_MATCH+1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nvar StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n};\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nvar TreeDesc = function(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n};\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short (s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c*2]/*.Code*/, tree[c*2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max]*2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max+1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n*2 +1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n*2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n-base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n*2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length-1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits+1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m*2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m*2 + 1]/*.Len*/)*tree[m*2]/*.Freq*/;\n        tree[m*2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS+1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits-1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n*2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n*2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS+1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES-1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1<<extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length-1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0 ; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1<<extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n*2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n*2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n*2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n*2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES+1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n*2 + 1]/*.Len*/ = 5;\n    static_dtree[n*2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc =new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n*2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n*2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n*2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK*2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n*2;\n  var _m2 = m*2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j+1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx*2] << 8) | (s.pending_buf[s.d_buf + lx*2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code+LITERALS+1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n*2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node*2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n*2 + 1]/*.Dad*/ = tree[m*2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code+1)*2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n+1)*2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6*2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10*2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138*2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n+1)*2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count-3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count-3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count-11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex]*2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3*(max_blindex+1) + 5+5+4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes-1,   5);\n  send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank]*2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes-1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes-1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n*2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK<<1)+(last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES<<1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len+3+7) >>> 3;\n    static_lenb = (s.static_len+3+7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len+4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES<<1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES<<1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code+1, s.d_desc.max_code+1, max_blindex+1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc*2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc]+LITERALS+1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize-1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n\n},{\"../utils/common\":1}],8:[function(require,module,exports){\n'use strict';\n\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n\n},{}],\"/lib/deflate.js\":[function(require,module,exports){\n'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate.js');\nvar utils = require('./utils/common');\nvar strings = require('./utils/strings');\nvar msg = require('./zlib/messages');\nvar zstream = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overriden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nvar Deflate = function(options) {\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n};\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function(data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function(chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function(status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate alrorythm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n\n},{\"./utils/common\":1,\"./utils/strings\":2,\"./zlib/deflate.js\":5,\"./zlib/messages\":6,\"./zlib/zstream\":8}]},{},[])(\"/lib/deflate.js\")\n});"]}